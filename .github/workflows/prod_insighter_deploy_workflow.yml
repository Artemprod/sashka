name: custdever production
on:
  workflow_dispatch:
  push:
    branches:
      - production


jobs:

  test:
    runs-on: ubuntu-latest
    steps:

    - name: Get the code from repo
      uses: actions/checkout@v4

    - name: Install pipx
      run: pip install pipx

    - name: Install poetry
      run: pipx install poetry

    - name: Install dependencies
      run: poetry install --no-root

    - name: Run tests
      run: |
        poetry run coverage run -m pytest  -v -s
    - name: Generate Coverage Report
      run: |
        coverage report -m


  build:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            artemprod/sashka
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=sha
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          push: true
          tags: ${{steps.meta.outputs.tags}}


  cleanup:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set short sha
        id: set_sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Load SSH aws key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{secrets.PRODUCTION_SERVER_PRIVAT_KEY}}

      - name: Add SSH key to known_hosts
        run: ssh-keyscan -H "${{vars.PRODUCTION_SERVER_HOST}}" >> ~/.ssh/known_hosts

      - name: Create Docker Context
        run: docker context create ${{vars.PRUDUCTION_DOCKER_CONTEXT}} --docker "host=ssh://${{ vars.PRODUCTION_SERVER_SSH_ROUTE }}" || true

      - name: Check if services exist
        id: check_services
        run: |
          SERVICES_EXIST=$(docker --context ${{vars.PRUDUCTION_DOCKER_CONTEXT}} ps -q --filter "name=custdever_api_getaway_main_worker" --filter "name=custdever_subscriber_researcher_worker" --filter "name=custdever_subscriber_communicator_worker" --filter "name=custdever_distributor")
          
          echo "Services Exist: $SERVICES_EXIST"
          if [ -n "$SERVICES_EXIST" ]; then
            echo "true"
          else
            echo "false"
          fi | tee /tmp/services_exist.txt
          echo "::set-output name=services_exist::$(cat /tmp/services_exist.txt)"

      - name: Cleanup services if they exist
        if: steps.check_services.outputs.services_exist == 'true'
        run: |
          
          echo "${{ vars.PRODUCTION_ENV_FILE }}" >> ./${{vars.PRODUCTION_DEPLOY_FOLDER}}/.env
          
          docker --context ${{vars.PRUDUCTION_DOCKER_CONTEXT}} compose -f ${{vars.PRODUCTION_DEPLOY_FOLDER}}/docker-compose.yml down
          docker --context ${{vars.PRUDUCTION_DOCKER_CONTEXT}} system prune -af
          if ! docker --context ${{vars.PRUDUCTION_DOCKER_CONTEXT}} network ls --filter name="${{vars.PRODUCTION_DOCKER_NETWORK}}" --format '{{.Name}}' | grep -w ${{vars.PRODUCTION_DOCKER_NETWORK}}; then
          docker --context ${{vars.PRUDUCTION_DOCKER_CONTEXT}} network create ${{vars.PRODUCTION_DOCKER_NETWORK}}
          fi
          

  deploy:
    needs: cleanup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          sparse-checkout: |
            ${{vars.PRODUCTION_DEPLOY_FOLDER}}/docker-compose.yml
          sparse-checkout-cone-mode: false


      - name: Set short sha
        id: set_sha
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Load SSH aws key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{secrets.PRODUCTION_SERVER_PRIVAT_KEY}}

      - name: Add SSH key to known_hosts
        run: ssh-keyscan -H "${{vars.PRODUCTION_SERVER_HOST}}" >> ~/.ssh/known_hosts

      - name: Create Docker Context
        run: docker context create ${{vars.PRUDUCTION_DOCKER_CONTEXT}} --docker "host=ssh://${{ vars.PRODUCTION_SERVER_SSH_ROUTE }}" || true

      - name: Ensure remote directory exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ vars.PRODUCTION_SERVER_SSH_ROUTE }} "mkdir -p /remote/nats/config/"

      - name: Copy nats config to remote server
        run: |
          scp -o StrictHostKeyChecking=no deploy/prod/nats/config/server.conf ${{ vars.PRODUCTION_SERVER_SSH_ROUTE }}:/remote/nats/config/

      - name: Deploy
        run: |                      
          echo "${{ vars.PRODUCTION_ENV_FILE }}" >> ./${{vars.PRODUCTION_DEPLOY_FOLDER}}/.env
          export IMAGE_TAG=sha-${{ steps.set_sha.outputs.sha_short }}
          docker --context ${{vars.PRUDUCTION_DOCKER_CONTEXT}} compose -f ${{vars.PRODUCTION_DEPLOY_FOLDER}}/docker-compose.yml up -d --wait --wait-timeout 60
        
        
